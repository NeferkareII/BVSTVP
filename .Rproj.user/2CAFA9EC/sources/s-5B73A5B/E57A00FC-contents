library(BVSTVP)

source("get_data.R")

p <- 3
data <- getData()
lags_inf <- shrinkTVP:::mlag(data$inf, p)[2:nrow(data), ]
lagged_data <- data[1:(nrow(data) - 1), !names(data) %in% c("inf", "year", "quarter")]
inf <- data$inf[2:nrow(data)]
mod_data <- as.data.frame(cbind(inf, lags_inf, lagged_data))[p:nrow(lagged_data),]

write.csv(mod_data, "data.csv")

niter <- 60000
nburn <- 10000
nthin <- 10

set.seed(123)
mod_inv_gamma <- BVS_TVP(inf ~ ., mod_data, niter = niter, nburn = nburn, nthin = nthin, sv = TRUE)
mod_dg <- shrinkTVP(inf ~ ., mod_data, niter = niter, nburn = nburn, nthin = nthin, sv = TRUE)
mod_tg <- shrinkTVP(inf ~ ., mod_data, niter = niter, nburn = nburn, nthin = nthin, sv = TRUE, mod_type = "triple")


# Extract labels from time series
labs = as.yearqtr(seq(as.Date("1961/1/1"), as.Date("2015/12/31"), by = "quarter"))[c(rep(FALSE, 15), TRUE)]
labs = format(format(labs, "%Y"))
pdf("predict.pdf")
layout(matrix(c(1, 1, 1, 1, 1,
                1, 2, 3, 4, 1,
                1, 1, 1, 1, 1), ncol = 5, byrow = TRUE), heights = c(0.05, 0.8, 0), widths = c(0.1, 0.3, 0.3, 0.3, 0.05))
par(mar = c(6, 0, 2, 0), mgp=c(1, .5, 0))
plot.new()
par(xpd = TRUE)
plot(predict(mod_inv_gamma), main = "Inverse Gamma", ylim = c(-5, 6), xaxt = "n")
par(xpd = FALSE)
lines(mod_data$inf, col = "forestgreen")
axis(1, at = (1:nrow(mod_data))[c(rep(FALSE, 15), TRUE)], labels = FALSE)
text(x=(1:nrow(mod_data))[c(rep(FALSE, 15), TRUE)],
     y=par()$usr[3]-0.02*(par()$usr[4]-par()$usr[3]),
     labels=labs, srt=45, adj=1, xpd=TRUE, mgp =c(1, .5, 0))
mtext("Infaltion", 2, line = 2)
plot(predict(mod_dg), main = "Double Gamma", ylim = c(-5, 6), xaxt = "n", yaxt = "n")
lines(mod_data$inf, col = "forestgreen")
axis(1, at = (1:nrow(mod_data))[c(rep(FALSE, 15), TRUE)], labels = FALSE)
text(x=(1:nrow(mod_data))[c(rep(FALSE, 15), TRUE)],
     y=par()$usr[3]-0.02*(par()$usr[4]-par()$usr[3]),
     labels=labs, srt=45, adj=1, xpd=TRUE, mgp =c(1, .5, 0))
plot(predict(mod_dg), main = "Triple Gamma", ylim = c(-5, 6), xaxt = "n", yaxt = "n")
lines(mod_data$inf, col = "forestgreen")
axis(1, at = (1:nrow(mod_data))[c(rep(FALSE, 15), TRUE)], labels = FALSE)
text(x=(1:nrow(mod_data))[c(rep(FALSE, 15), TRUE)],
     y=par()$usr[3]-0.02*(par()$usr[4]-par()$usr[3]),
     labels=labs, srt=45, adj=1, xpd=TRUE, mgp =c(1, .5, 0))
dev.off()
write.csv(mod_tg$sigma2, file = "sigma2.csv")



# Calculate LPDS in multicore
# Load libraries for multicore computations
library("doParallel")
library("foreach")

# For manipulating dates
library("zoo")

# Load library for controlling number of BLAS threads
library("RhpcBLASctl")

# Define how many periods to calculate LPDS for
Tmax <- nrow(mod_data) - 1
T0 <- Tmax - 49

# Determine number of cores to be used and register parallel backend
ncores <- 6
cl <- makeCluster(ncores)
registerDoParallel(cl)

lpds <- foreach(t = T0:Tmax, .combine = "cbind",
                .packages = c("RhpcBLASctl", "shrinkTVP", "BVSTVP"),
                .errorhandling = "pass") %dopar% {

                  set.seed(t)

                  niter <- 60000
                  nburn <- 30000
                  nthin <- 10

                  # Set number of BLAS threads, so they dont interfere with each other
                  blas_set_num_threads(1)

                  # Create data_t from all data up to time t and
                  # y_test and x_test from data at time t+1
                  data_test <- mod_data[t+1,]
                  data_t <- mod_data[1:t,]

                  # Run MCMC to calculate all LPDS
                  # Fully hierarchical triple gamma
                  mod_inv_gamma <- BVS_TVP(inf ~ ., data_t, niter = niter, nburn = nburn, nthin = nthin, sv = TRUE)
                  mod_dg <- shrinkTVP(inf ~ ., data_t, niter = niter, nburn = nburn, nthin = nthin, sv = TRUE)
                  mod_tg <- shrinkTVP(inf ~ ., data_t, niter = niter, nburn = nburn, nthin = nthin, sv = TRUE, mod_type = "triple", learn_kappa2_B = FALSE, learn_lambda2_B = FALSE)


                  lpds_res <- c(LPDS(mod_inv_gamma, data_test),
                                LPDS(mod_dg, data_test),
                                LPDS(mod_tg, data_test))

                  rm(list = ls()[!ls() %in% c("lpds_res", "mod_data")])

                  return(lpds_res)
                }
stopCluster(cl)


cumu_lpds <- apply(lpds, 1, cumsum)
color <- c("cyan3",
           "firebrick3",
           "forestgreen")
lty <- 1

# Plot results
par(mar=c(6,4,1,1))
colnames(cumu_lpds) <- c("Inverse Gamma",
                         "Double Gamma",
                         "Triple Gamma")

matplot(cumu_lpds, type = "l", ylab = "Cumulative LPDS",
        xaxt = "n", xlab = "", col = color, lty = lty, lwd = 1.5)

# Extract labels from time series
labs = as.yearmon(seq(as.Date("1961/1/1"), as.Date("2015/12/31"), by = "quarter"))[T0:(Tmax-1)][c(FALSE, TRUE)]

# Create custom axis labels
axis(1, at = (1:length(T0:(Tmax-1)))[c(FALSE, TRUE)], labels = FALSE)
text(x=(1:length(T0:(Tmax-1)))[c(FALSE, TRUE)],
     y=par()$usr[3]-0.05*(par()$usr[4]-par()$usr[3]),
     labels=labs, srt=45, adj=1, xpd=TRUE)

# Add legend
legend("topright", colnames(cumu_lpds), col = color,
       lty = lty,lwd = 1.5, bty = "n", cex = 0.8)

